{
  "author": {
    "name": "James R. Carr",
    "email": "james.r.carr@gmail.com",
    "url": "http://blog.james-carr.org"
  },
  "name": "mongoosastic",
  "description": "A mongoose plugin that indexes models into elastic search",
  "version": "2.0.1",
  "tags": [
    "mongodb",
    "elastic search",
    "mongoose",
    "full text search"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/mongoosastic/mongoosastic"
  },
  "main": "lib/mongoosastic.js",
  "dependencies": {
    "elasticsearch": "^2.4.3",
    "nop": "^1.0.0"
  },
  "peerDependencies": {
    "mongoose": "3.8.x"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "async": "*",
    "mongoose": "3.8.x"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha -R spec -t 20000 -b"
  },
  "readme": "# Mongoosastic\n[![Build\nStatus](https://secure.travis-ci.org/mongoosastic/mongoosastic.png?branch=master)](http://travis-ci.org/mongoosastic/mongoosastic)\n[![NPM version](https://badge.fury.io/js/mongoosastic.svg)](http://badge.fury.io/js/mongoosastic)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mongoosastic/mongoosastic?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nMongoosastic is a [mongoose](http://mongoosejs.com/) plugin that can automatically index your models into [elasticsearch](http://www.elasticsearch.org/).\n\n- [Installation](#installation)\n- [Setup](#setup)\n- [Indexing](#indexing)\n\t- [Saving a document](#saving-a-document)\n\t- [Indexing nested models](#indexing-nested-models)\n\t- [Indexing an existing collection](#indexing-an-existing-collection)\n\t- [Bulk indexing](#bulk-indexing)\n\t- [Indexing on demand](#indexing-on-demand)\n\t- [Truncating an index](#truncating-an-index)\n- [Mapping](#mapping)\n\t- [Geo mapping](#geo-mapping)\n\t\t- [Indexing a geo point](#indexing-a-geo-point)\n\t\t- [Indexing a geo shape](#indexing-a-geo-shape)\n\t- [Creating mappings on-demand](#creating-mappings-on-demand)\n- [Queries](#queries)\n\t- [Hydration](#hydration)\n\n## Installation\n\n```bash\nnpm install -S mongoosastic\n```\n\n## Setup\n\n### Model.plugin(mongoosastic, options)\n\nOptions are:\n\n* `index` - the index in elastic search to use. Defaults to the\n  pluralization of the model name.\n* `type`  - the type this model represents in elastic search. Defaults\n  to the model name.\n* `host` - the host elastic search is running on\n* `port` - the port elastic search is running on\n* `auth` - the authentication needed to reach elastic search server. In the standard format of 'username:password'\n* `protocol` - the protocol the elastic search server uses. Defaults to http\n* `hydrate` - whether or not to lookup results in mongodb before\n* `hydrateOptions` - options to pass into hydrate function\n* `bulk` - size and delay options for bulk indexing\n\n\nTo have a model indexed into elastic search simply add the plugin.\n\n```javascript\nvar mongoose     = require('mongoose')\n  , mongoosastic = require('mongoosastic')\n  , Schema       = mongoose.Schema\n\nvar User = new Schema({\n    name: String\n  , email: String\n  , city: String\n})\n\nUser.plugin(mongoosastic)\n```\n\nThis will by default simply use the pluralization of the model name as the index \nwhile using the model name itself as the type. So if you create a new\nUser object and save it, you can see it by navigating to\nhttp://localhost:9200/users/user/_search (this assumes elasticsearch is\nrunning locally on port 9200). \n\nThe default behavior is all fields get indexed into elasticsearch. This can be a little wasteful especially considering that\nthe document is now just being duplicated between mongodb and\nelasticsearch so you should consider opting to index only certain fields by specifying ''es_indexed'' on the \nfields you want to store:\n\n\n```javascript\nvar User = new Schema({\n    name: {type:String, es_indexed:true}\n  , email: String\n  , city: String\n})\n\nUser.plugin(mongoosastic)\n```\n\nIn this case only the name field\nwill be indexed for searching.\n\nNow, by adding the plugin, the model will have a new method called\n`search` which can be used to make simple to complex searches. The `search`\nmethod accepts [standard elasticsearch query DSL](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-queries.html)\n\n```javascript\nUser.search({\n  query_string: {\n    query: \"john\"\n  }\n}, function(err, results) {\n  // results here\n});\n\n```\n\n## Indexing\n\n### Saving a document\nThe indexing takes place after saving inside the mongodb and is a defered process. \nOne can check the end of the indexion catching es-indexed event. \n\n```javascript\ndoc.save(function(err){\n  if (err) throw err;\n  /* Document indexation on going */\n  doc.on('es-indexed', function(err, res){\n    if (err) throw err;\n    /* Document is indexed */\n    });\n  });\n```\n\n\n###Indexing Nested Models\nIn order to index nested models you can refer following example.\n\n```javascript\nvar Comment = new Schema({\n    title: String\n  , body: String\n  , author: String\n})\n\n\nvar User = new Schema({\n    name: {type:String, es_indexed:true}\n  , email: String\n  , city: String\n  , comments: {type:[Comment], es_indexed:true}\n})\n\nUser.plugin(mongoosastic)\n```\n\n\n### Indexing An Existing Collection\nAlready have a mongodb collection that you'd like to index using this\nplugin? No problem! Simply call the synchronize method on your model to\nopen a mongoose stream and start indexing documents individually. \n\n```javascript\nvar BookSchema = new Schema({\n  title: String\n});\nBookSchema.plugin(mongoosastic);\n\nvar Book = mongoose.model('Book', BookSchema)\n  , stream = Book.synchronize()\n  , count = 0;\n\nstream.on('data', function(err, doc){\n  count++;\n});\nstream.on('close', function(){\n  console.log('indexed ' + count + ' documents!');\n});\nstream.on('error', function(err){\n  console.log(err);\n});\n```\n\nYou can also synchronize a subset of documents based on a query!\n\n```javascript\nvar stream = Book.synchronize({author: 'Arthur C. Clarke'})\n```\n\n### Bulk Indexing\n\nYou can also specify `bulk` options with mongoose which will utilize elasticsearch's bulk indexing api. This will cause the `synchronize` function to use bulk indexing as well. \n\nMongoosastic will wait 1 second (or specified delay) until it has 1000 docs (or specified size) and then perform bulk indexing.\n\n```javascript\nBookSchema.plugin(mongoosastic, {\n  bulk: {\n    size: 10, // preferred number of docs to bulk index\n    delay: 100 //milliseconds to wait for enough docs to meet size constraint\n  }\n});\n```\n\n### Indexing On Demand\nYou can do on-demand indexes using the `index` function\n\n```javascript\nDude.findOne({name:'Jeffery Lebowski', function(err, dude){\n  dude.awesome = true;\n  dude.index(function(err, res){\n    console.log(\"egads! I've been indexed!\");\n  });\n});\n```\n\nThe index method takes 2 arguments:\n\n* `options` (optional) - {index, type} - the index and type to publish to. Defaults to the standard index and type.\n  the model was setup with.\n* `callback` - callback function to be invoked when model has been\n  indexed.\n\nNote that indexing a model does not mean it will be persisted to\nmongodb. Use save for that.\n\n### Truncating an index\n\nThe static method truncate will deleted all documents from the associated index. This method combined with synchronise can be usefull in case of integration tests for example when each test case needs a cleaned up index in ElasticSearch.\n\n```javascript\nGarbageModel.truncate(function(err){...});\n```\n\n## Mapping\n\nSchemas can be configured to have special options per field. These match\nwith the existing [field mapping configurations](http://www.elasticsearch.org/guide/reference/mapping/core-types.html) defined by elasticsearch with the only difference being they are all prefixed by \"es_\". \n\nSo for example. If you wanted to index a book model and have the boost\nfor title set to 2.0 (giving it greater priority when searching) you'd\ndefine it as follows:\n\n```javascript\nvar BookSchema = new Schema({\n    title: {type:String, es_boost:2.0}\n  , author: {type:String, es_null_value:\"Unknown Author\"}\n  , publicationDate: {type:Date, es_type:'date'} \n}); \n\n```\nThis example uses a few other mapping fields... such as null_value and\ntype (which overrides whatever value the schema type is, useful if you\nwant stronger typing such as float).\n\nThere are various mapping options that can be defined in elasticsearch. Check out [http://www.elasticsearch.org/guide/reference/mapping/](http://www.elasticsearch.org/guide/reference/mapping/) for more information. Here are examples to the currently possible definitions in mongoosastic:\n\n```javascript\nvar ExampleSchema = new Schema({\n  // String (core type)\n  string: {type:String, es_boost:2.0},\n\n  // Number (core type)\n  number: {type:Number, es_type:'integer'},\n\n  // Date (core type)\n  date: {type:Date, es_type:'date'},\n\n  // Array type\n  array: {type:Array, es_type:'string'},\n\n  // Object type \n  object: {\n    field1: {type: String},\n    field2: {type: String}\n  },\n\n  // Nested type \n  nested: [SubSchema],\n\n  // Multi field type\n  multi_field: {\n    type: String,\n    es_type: 'multi_field',\n    es_fields: {\n      multi_field: { type: 'string', index: 'analyzed' },\n      untouched: { type: 'string', index: 'not_analyzed' }\n    }\n  },\n\n  // Geo point type\n  geo: {\n    type: String,\n    es_type: 'geo_point'\n  },\n\n  // Geo point type with lat_lon fields\n  geo_with_lat_lon: {\n    geo_point: {\n      type: String,\n      es_type: 'geo_point',\n      es_lat_lon: true\n    },\n    lat: { type: Number },\n    lon: { type: Number }\n  }\n\n  geo_shape: {\n    coordinates : [],\n    type: {type: String},\n    geo_shape: {\n      type:String,\n      es_type: \"geo_shape\",\n      es_tree: \"quadtree\",\n      es_precision: \"1km\"\n    }\n  }\n\n  // Special feature : specify a cast method to pre-process the field before indexing it\n  someFieldToCast : {\n    type: String,\n    es_cast: function(value){\n      return value + ' something added';\n    }\n  }\n\n});\n\n// Used as nested schema above.\nvar SubSchema = new Schema({\n  field1: {type: String},\n  field2: {type: String}\n});\n```\n\n### Geo mapping\nPrior to index any geo mapped data (or calling the synchronize), \nthe mapping must be manualy created with the createMapping (see above).\n\nNotice that the name of the field containing the ES geo data must start by\n'geo_' to be recognize as such.\n\n#### Indexing a geo point\n\n```javascript\nvar geo = new GeoModel({\n  /* … */\n  geo_with_lat_lon: { lat: 1, lon: 2}\n  /* … */\n});\n```\n\n#### Indexing a geo shape\n\n```javascript\nvar geo = new GeoModel({\n  …\n  geo_shape:{\n    type:'envelope',\n    coordinates: [[3,4],[1,2] /* Arrays of coord : [[lon,lat],[lon,lat]] */\n  }\n  …\n});\n```\n\nMapping, indexing and searching example for geo shape can be found in test/geo-test.js\n\nFor example, one can retrieve the list of document where the shape contain a specific \npoint (or polygon...)\n\n```javascript\nvar geoQuery = {\n      \"match_all\": {}\n    }\n\nvar geoFilter = {\n      geo_shape: {\n        geo_shape\": {\n          shape: {\n            type: \"point\", \n            coordinates: [3,1]\n          }\n        }\n      }\n    }\n\nGeoModel.search(geoQuery, {filter: geoFilter}, function(err, res) { /* ... */ })\n```\n\n### Creating Mappings On Demand\nCreating the mapping is a one time operation and can be done as\nfollows (using the BookSchema as an example):\n\n```javascript \nvar BookSchema = new Schema({\n    title: {type:String, es_boost:2.0}\n  , author: {type:String, es_null_value:\"Unknown Author\"}\n  , publicationDate: {type:Date, es_type:'date'} \n\nBookSchema.plugin(mongoosastic);\nvar Book = mongoose.model('Book', BookSchema);\nBook.createMapping({\n  \"analysis\" : {\n    \"analyzer\":{\n      \"content\":{\n        \"type\":\"custom\",\n        \"tokenizer\":\"whitespace\"\n      }\n    }\n  }\n},function(err, mapping){\n  // do neat things here\n});\n\n```\nThis feature is still a work in progress. As of this writing you'll have\nto manage whether or not you need to create the mapping, mongoosastic\nwill make no assumptions and simply attempt to create the mapping. If\nthe mapping already exists, an Exception detailing such will be\npopulated in the `err` argument. \n\n\n## Queries\nThe full query DSL of elasticsearch is exposed through the search\nmethod. For example, if you wanted to find all people between ages 21\nand 30:\n\n```javascript\nPerson.search({\n  range: {\n    age:{\n      from:21\n    , to: 30\n    }\n  }\n}, function(err, people){\n   // all the people who fit the age group are here!   \n});\n\n```\nSee the elasticsearch [Query DSL](http://www.elasticsearch.org/guide/reference/query-dsl/) docs for more information.\n\nYou can also specify query options like [sorts](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-sort.html#search-request-sort)\n\n```javascript\nPerson.search({/* ... */}, {sort: \"age:asc\"}, function(err, people){\n  //sorted results\n});\n```\n\nOptions for queries must adhere to the [javascript elasticsearch driver specs](http://www.elasticsearch.org/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#api-search).\n\n\n### Hydration\nBy default objects returned from performing a search will be the objects\nas is in elastic search. This is useful in cases where only what was\nindexed needs to be displayed (think a list of results) while the actual\nmongoose object contains the full data when viewing one of the results.\n\nHowever, if you want the results to be actual mongoose objects you can\nprovide {hydrate:true} as the second argument to a search call.\n\n```javascript\n\nUser.search({query_string: {query: \"john\"}}, {hydrate:true}, function(err, results) {\n  // results here\n});\n\n```\n\nYou can also pass in a `hydrateOptions` object with information on\nhow to query for the mongoose object.\n\n```javascript\n\nUser.search({query_string: {query: \"john\"}}, {hydrate:true, hydrateOptions: {select: 'name age'}}, function(err, results) {\n  // results here\n});\n\n```\n\nNote using hydrate will be a degree slower as it will perform an elasticsearch\nquery and then do a query against mongodb for all the ids returned from\nthe search result. \n\nYou can also default this to always be the case by providing it as a\nplugin option (as well as setting default hydrate options):\n\n\n```javascript\nvar User = new Schema({\n    name: {type:String, es_indexed:true}\n  , email: String\n  , city: String\n})\n\nUser.plugin(mongoosastic, {hydrate:true, hydrateOptions: {lean: true}})\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mongoosastic/mongoosastic/issues"
  },
  "homepage": "https://github.com/mongoosastic/mongoosastic",
  "_id": "mongoosastic@2.0.1",
  "_shasum": "beab0ce3e202f88ae8dd7efb301e446533515410",
  "_from": "mongoosastic@",
  "_resolved": "https://registry.npmjs.org/mongoosastic/-/mongoosastic-2.0.1.tgz"
}
